Gramática:

S:   (GC29) { Dec | Comandos } EOF (GC30)
Dec:   const id (29) = [- (40)] (constante | true | false) (30) (GC28)
Dec:   (int (31) | float (32) | char (33) | string (34) ) id (35) (GC24) [:= [- (36)] constante (37) (GC26) (GC27)] {, id (35) (GC24) [:= [- (36) ] constante (37) (GC26) (GC27)]}
Dec:   boolean id (38) (GC24) [:= (true | false) (GC25)] {, id (38) (GC24) [:= (true | false) (GC25)]} );
Comandos:   if (GC21) "(" Exp ")" (24) (GC19) (Comandos | "{" {Comandos} "}") [else (GC22) (Comandos | "{" {Comandos} "}")] (GC23)
Comandos:   while (GC18) "(" Exp ")" (24) (GC19) (Comandos | "{" {Comandos} "}") (GC20)
Comandos:   [ id (25) (GC13) [ "[" (6) Exp (26) "]" (GC14)] := Exp (27) (GC15)  |  readln "(" id (25) ")" (GC16) |  (write | writeln) (GC13) "(" Exp (28) (GC17) {, Exp (28) } ")" ];
Exp:   ExpS (GC11) [ (= | != | < | > | <= | >=) ExpS1 (22) (GC12) ] (23)
ExpS:   [- (39)] T (15) (GC9) { (+ (16) | - (17) | "||" (18) ) T1 (19) (GC10) } (20)
T:   F (GC7) { ( / (9) | * (10) | && (11) | div (12) | mod (12)) F1 (13) (GC8) } (14)
F:   constante (1) (GC1)
F:   (int | float) (2) "(" Exp (3) ")" (GC2)
F:   "(" Exp (4) ")" (GC3)
F:   id (5) (GC4) [ "[" (6) Exp (7) "]" (GC5)]
F:   ! F1 (8) (GC6)

Esquema de Tradução

OBS: Para simplificar, a notação [x] significa [qword M+x]

(GC1) { F.end = NovoTemp }
      { move a constante para reg1 }
      { move reg1 para [F.end] }

(GC2) { F.end = NovoTemp }
      { move o conteudo de Exp para reg1 (mov, movss) }
      { conforme tipo de F, converte reg1 (para inteiro ou real), e move reg1 para [F.end] }

(GC3) { F.end = Exp.end }

(GC4) { F.end = id.end }

(GC5) { F.end = NovoTemp }
      { move o endereço de Exp para rsi }
      { soma o endereço de id com o rsi para pegar o endereço da posição da string}
      { move [rsi] para reg1 }
      { move reg1 para [F.end] }

(GC6) { F.end = NovoTemp }
      { move o conteudo de F1 para reg1, nega esse valor, e move para [F.end] }

(GC7) { T.end = F.end }

(GC8) { mover o conteudo de T para reg1 }
      { mover o conteudo de F1 para reg2 }
      { fazer a conversão de tipos dependendo da operação e dos tipos de F e F1 }
      { conforme operador, gerar instrução (idiv, divss, imul, mulss) entre reg1 e reg2}

(GC9) Se ExpS.flag_negativo
        { ExpS.end = NovoTemp }
        { move o conteudo de T para reg1 }
        { inverte o sinal do valor de reg1 (se for inteiro nega, se for real multiplica por -1) }
        { move o resultado para [ExpS.end] }
      Senao
        { ExpS.end = T.end }  

(GC10) { mover o conteudo de ExpS para reg1 }
       { mover o conteudo de ExpS1 para reg2 }
       { fazer a conversão de tipos se for necessário }
       { realizar operação de acordo com o operador (add, sub). No caso do OR (||) simular usando instruções aritméticas (neg, imul) }
       { ExpS.end = NovoTemp }
       { mover resultado da operação para [ExpS.end] }

(GC11) { Exp.end = ExpS.end }

(GC12) { mover o conteudo de ExpS para reg1 }
       { mover o conteudo de ExpS1 para reg2 }
       { compara o conteudo de reg1 com reg2 (cmp, comiss) }
       { Rot_verdadeiro := NovoRotulo }
       { gera instrução de jump para o Rot_verdadeiro dependendo do operador: 
          je (=), jne (<>), jl/jb (<), jg/ja (>), jge/jae (>=), jle/jbe (<=) }
       { move 0 para eax (expressão é falsa) }
       { Rot_fim := NovoRotulo }
       { jump para Rot_fim }
       { Rot_verdadeiro: }
       { move 1 para eax (expressão é verdadeira) }
       { Rot_fim: }
       { Exp.end = NovoTemp }
       { move o conteudo de eax para [Exp.end] }

(GC13) { limpa area de temporarios }

(GC14) { }

(GC15) { } 

(GC16) { Cria um buffer para a entrada (NovoTemp de 256 bytes) }
       { realiza a chamada de leitura de acordo com o sistema operacional }
       { realiza as conversões de tipo de acordo com o tipo do dado lido e armazena o resultado no reg1 (eax ou xmmm0) }
       { move o conteudo de reg1 para [id.end] }

(GC17) Se Exp.tipo == string entao
          { move o tamanho da string e o endereço inicial para registradores, e faz a chamada para saída na tela }
       Senao
          { converter o conteudo de Exp e armazenar em um buffer temporário (buffer.end) }
          { faz a chamada para a saída na tela }

(GC18) { Rot_inicio := NovoTemp e Rot_fim := NovoTemp }
       { Rot_inicio: }

(GC19) { move o conteudo de Exp para reg1 }
       { compara reg1 com 1 (verdadeiro) }
       { jump para Rot_fim se for falso (jne) }

(GC20) { jump para Rot_inicio (jmp) }
       { Rot_fim: }

(GC21) { Rot_falso := NovoTemp e Rot_fim := NovoTemp }

(GC22) { jump para Rot_fim }
       { Rot_falso: }

(GC23) { Rot_fim: }

(GC24) { reserva memória de acordo com o tipo do id (dd, db) }

(GC25) { move o conteudo da constante para reg1 }
       { move reg1 para [id.end] }

(GC26) { move conteudo da constante para reg1 }

(GC27) Se Dec.negativo entao
          { nega valor do reg1 }
       { move reg1 para [id.end] }

(GC28) Se Dec.negativo entao 
          { reserva memória com o sinal de '-' (ex: dd -2) }
       Senao
          { reserva memória normalmente (ex: dd 15) }
       { move o conteudo da constante para reg1 }
       { move o conteudo de reg1 para [id.end] } 

(GC29) { Inicializa o programa com a sessão de dados (section .data) }
       { M: } 
       { reserva de temporários (resb 10000h) }
       { sessão de código (section .text) }
       { start do programa (_start:) }

(GC30) { Finaliza o programa com interrupção e chamada do kernel (syscall) }